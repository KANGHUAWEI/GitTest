1、注册github账号
2、查验、创建SSH Key
3、 Add SSH Key
4、测试连通性



1.注册+检查.ssh秘钥：由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，
     所以我们需要配置验证信息(No such file or directory表示第一次)
   $ cd ~/.ssh
   
2.创建SSH Key： ssh-keygen -t rsa -C ynweikanghua@163.com
     成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。
     
3.粘贴id_rsa.pub内容到Github

4.测试连通性： ssh -T git@github.com

5.本地github远程库

    现在的情景是，我在本地创建了一个OA项目后，我又想在GitHub创建一个OA项目，并且让这两个仓库进行远程同步

	5.1  先在本地新建好一个git项目
	5.2  到Github上新建一个同名的空项目
	5.3  本地和github上的仓库进行关联
		git remote add origin https://github.com/zzyybs/oa.git
		
	5.4 把本地库的内容推送到远程git push命令，实际上是把当前分支master推送到远程
		git push -u origin master

      由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

6. github远程库本地

    现在的情景是,我们从零开发，那么最好的方式是先创建远程库，然后从远程库克隆

	6.1  登陆GitHub，创建一个新的仓库，名字叫OA2
	6.2  远程库OK，下一步是用命令git clone克隆一个本地库
	    Git clone git@github.com:zzyybs/oa2.git

7. Git交互模型-上

    现在的情景是,本地或者远程均有修改，如何同步共享，提交修改
	7.1  本地修改，同步给远程
	7.2  远程修改，同步到本地

7. Git交互模型-下

	一般工作流程如下：
	
	1 克隆 Git 资源作为工作目录。
	
	2 在克隆的资源上添加或修改文件。
	
	3 如果其他人修改了，你可以更新资源。
	
	4 在提交前查看修改。
	
	5 提交修改。
	
	6 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。

8. Fork

	现在的情景是,用叉子把别人的东西（copy no cut）叉到你碗里～
	就是把别人的项目clone一份，但是owner变成自己，这样你就可以在遵守Open source license的前提下任意修改这个项目了。
	
	    相当于你在原项目的主分支上又建立了一个分支，你可以在该分支上任意修改，如果想将你的修改合并到原项目中时，可以pull request，这样原项目的作者就可以将你修改的东西合并到原项目的主分支上去，这样你就为开源项目贡献了代码，开源项目就会在大家共同的努力下不断壮大和完善。

	解决Git push时重复输入用户名密码2
		C:\Users\admin目录下新建名字为_netrc的文件并编辑该文件写如下内容：
		machine github.com
		login 你的用户名(zzyybs)
		password 你的密码

   mkdir：         XX (创建一个空目录 XX指目录名)
   pwd：          显示当前目录的路径。
   git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。
   touch           xx文件或者新建文件
   git add XX       把xx文件添加到暂存区去。
   git commit –m “XX”  提交文件 –m 后面的是注释。
   git status        查看仓库状态
   git diff  XX      查看XX文件修改了那些内容
   git log          查看历史记录
   git reset  --hard HEAD^
   cat XX         查看XX文件内容
   git reflog       查看历史记录的版本号id
   git checkout -- XX  把XX文件在工作区的修改全部撤销。
   git rm XX          删除XX文件
   git remote add origin https://github.com/zzyybs/testgit 关联一个远程库
   git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库
   git clone https://github.com/arjrzhouyang/testgit  从远程库中克隆
   git checkout –b dev  创建dev分支 并切换到dev分支上
   git branch  查看当前所有的分支
   git checkout master 切换回master分支
   git merge dev    在当前的分支上合并dev分支
   git branch –d dev 删除dev分支
   git branch name  创建分支
   git remote 查看远程库的信息
   git remote –v 查看远程库的详细信息
   git push origin master  Git会把master分支推送到远程库对应的远程分支上  

 * 用“git diff HEAD -- filename”命令可以查看工作区和暂存区里面最新版本的区别。
 * 新建过撤销未add： git checkout  -- 文件名
 * 撤销已add未commit：先git  reset HEAD  文件名 再 git checkout -- 文件名
*  撤销已add已commit:       git reset –hard HEAD^


escapedev@163.com